{"version":3,"file":"app.min.js","sources":["app.min.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nvar _times = require(\"./times.js\");\n\n// Imports from times.js\n// Time of starting solve\nvar startTime, interval; // Boolean is user in solve\n\nvar inSolve = 0; // Boolean is user in process of starting a solve\n\nvar startingSolve = 0; // Timeout variable to set timer green when user has held the space bar for long enough\n\nvar spaceBarTimeout; // Begin timestamp and duration of the time the user has held down the space bar\n\nvar spaceBarPressedBegin, spaceBarPressedDuration; // Array with all solves\n\nvar solves = []; // Prepare a solve\n\nvar prepareSolve = function prepareSolve() {\n  return document.getElementById(\"scramble\").innerText = (0, _times.generateScramble)();\n};\n\nwindow.prepareSolve = prepareSolve; // Process a solve\n\nvar processSolve = function processSolve() {\n  // Get solve time\n  var solveTime = document.getElementById(\"timer\").innerHTML; // Add solve time to array\n\n  solves.push(solveTime); // Prepare and add paragraph with solve id and solve time\n\n  var paragraph = document.createElement(\"P\");\n  paragraph.innerHTML = \"<p>Solve \" + solves.length + \": <strong>\" + solveTime + \"</strong></p>\";\n  document.getElementById(\"times\").appendChild(paragraph); // Update best solve if needed\n\n  document.getElementById(\"best\").innerHTML = \"Best of \" + solves.length + \": <strong>\" + (0, _times.getBest)(solves) + \"</strong>\"; // Update average time of solves\n\n  document.getElementById(\"average\").innerHTML = \"Average of \" + solves.length + \": <strong>\" + (0, _times.getAverage)(solves) + \"</strong>\";\n}; // Start a solve\n\n\nvar startSolve = function startSolve() {\n  inSolve = 1;\n  startTime = Date.now();\n  interval = setInterval(function () {\n    return updateDisplay(Date.now() - startTime);\n  });\n}; // Cancel a solve\n\n\nvar cancelSolve = function cancelSolve() {\n  setTimer(\"black\");\n  startingSolve = 0;\n}; // Stop a solve\n\n\nvar stopSolve = function stopSolve() {\n  // User is not in solve and is not starting one\n  inSolve = 0;\n  startingSolve = 0; // Change timer color\n\n  setTimer(\"black\"); // Stop timer and display solve time\n\n  clearInterval(interval);\n  displayFinalTime(Date.now() - startTime); // Process solve -> add solve to screen, change best and average\n\n  processSolve(); // Prepare next solve -> generate scramble for next solve\n\n  prepareSolve();\n}; // Change color of timer\n\n\nvar setTimer = function setTimer(color) {\n  return document.getElementById(\"timer\").style.color = color;\n}; // Update time of timer\n\n\nvar updateDisplay = function updateDisplay(currentTime) {\n  return document.getElementById(\"timer\").innerHTML = Math.floor(currentTime / 1000);\n}; // Display final time\n\n\nvar displayFinalTime = function displayFinalTime(currentTime) {\n  return document.getElementById(\"timer\").innerHTML = (currentTime / 1000).toFixed(2);\n}; // When user presses down a key\n\n\ndocument.onkeydown = function (event) {\n  // Check for space bar\n  if (event.code !== \"Space\") {\n    return;\n  } // Check if user is in solve\n\n\n  if (inSolve == 1) {\n    stopSolve();\n    return;\n  } // If user is already starting solve\n\n\n  if (startingSolve) {\n    return;\n  }\n\n  startingSolve = 1;\n  document.getElementById(\"timer\").innerHTML = \"0\"; // Get timestamp when the user holds the space key\n\n  spaceBarPressedBegin = event.timeStamp; // Set timer to red -> indicate that he has to hold\n\n  setTimer(\"red\"); // Set timeout for timer to become green so that the user can begin their solve\n\n  spaceBarTimeout = setTimeout(function () {\n    return setTimer(\"green\");\n  }, 500);\n}; // When user releases a key\n\n\ndocument.onkeyup = function (event) {\n  // Check for space bar\n  if (event.code !== \"Space\") {\n    return;\n  } // Check if user is starting their solve\n\n\n  if (!startingSolve) {\n    return;\n  } // Get how long has the user held the space bar\n\n\n  spaceBarPressedDuration = (event.timeStamp - spaceBarPressedBegin) / 1000; // Clear timeout, we don't need it anymore\n\n  clearTimeout(spaceBarTimeout); // Check if user has held down long enough\n\n  if (spaceBarPressedDuration < 0.5) {\n    cancelSolve();\n    return;\n  } // Start solve because user has held long enough\n\n\n  startSolve();\n}; // When user presses screen (on phone)\n\n\ndocument.getElementById(\"timer\").ontouchstart = function (event) {\n  // Check if user is in solve\n  if (inSolve == 1) {\n    stopSolve();\n    return;\n  } // If user is already starting solve\n\n\n  if (startingSolve) {\n    return;\n  }\n\n  startingSolve = 1;\n  document.getElementById(\"timer\").innerHTML = \"0\"; // Get timestamp when the user holds the space key\n\n  spaceBarPressedBegin = event.timeStamp; // Set timer to red -> indicate that he has to hold\n\n  setTimer(\"red\"); // Set timeout for timer to become green so that the user can begin their solve\n\n  spaceBarTimeout = setTimeout(function () {\n    return setTimer(\"green\");\n  }, 500);\n}; // When user releases screen (on phone)\n\n\ndocument.getElementById(\"timer\").ontouchend = function (event) {\n  // Check if user is starting their solve\n  if (!startingSolve) {\n    return;\n  } // Get how long has the user held the space bar\n\n\n  spaceBarPressedDuration = (event.timeStamp - spaceBarPressedBegin) / 1000; // Clear timeout, we don't need it anymore\n\n  clearTimeout(spaceBarTimeout); // Check if user has held down long enough\n\n  if (spaceBarPressedDuration < 0.5) {\n    cancelSolve();\n    return;\n  } // Start solve because user has held long enough\n\n\n  startSolve();\n};\n\n},{\"./times.js\":2}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateScramble = exports.getBest = exports.getAmount = exports.getAverage = void 0;\n\n// Get average time of all solves\nvar getAverage = function getAverage(times) {\n  var result = 0;\n  times.forEach(function (time) {\n    return result += parseFloat(time);\n  });\n  return (result / getAmount(times)).toFixed(2);\n}; // Get amount of times\n\n\nexports.getAverage = getAverage;\n\nvar getAmount = function getAmount(times) {\n  return times.length;\n}; // Get best time\n\n\nexports.getAmount = getAmount;\n\nvar getBest = function getBest(times) {\n  var best = 100000;\n  times.forEach(function (time) {\n    if (time < best) {\n      best = time;\n    }\n  });\n  return best;\n}; // Generate scramble text for the user to follow\n\n\nexports.getBest = getBest;\n\nvar generateScramble = function generateScramble() {\n  var sides = [\"U\", \"F\", \"R\", \"D\", \"B\", \"L\"];\n  var angles = [\"\", \"'\", \"2\"];\n  var previousSides = [];\n  var scramble = \"\";\n\n  for (var i = 0; i < 20; i++) {\n    // Generate a random number from 0 to 5 for the side\n    var side = Math.floor(Math.random() * 6);\n\n    while (previousSides.includes(side)) {\n      side = Math.floor(Math.random() * 6);\n    } // Add sides to previous sides\n\n\n    previousSides.push(side);\n\n    if (previousSides.length == 3) {\n      previousSides.splice(0, 1);\n    }\n\n    if (previousSides.length == 2) {\n      // Check for opposite sides\n      if (previousSides[0] + 3 != previousSides[1] && previousSides[0] - 3 != previousSides[1]) {\n        previousSides.splice(0, 1);\n      }\n    } // Generate an angle\n\n\n    var angle = Math.floor(Math.random() * 3);\n    scramble += \" \" + sides[side] + angles[angle] + \"\\xA0\";\n  }\n\n  return scramble;\n};\n\nexports.generateScramble = generateScramble;\n\n},{}]},{},[1,2]);\n"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","prepareSolve","document","getElementById","innerText","_times","generateScramble","startTime","interval","spaceBarTimeout","spaceBarPressedBegin","spaceBarPressedDuration","inSolve","startingSolve","solves","window","startSolve","Date","now","setInterval","updateDisplay","cancelSolve","setTimer","stopSolve","clearInterval","displayFinalTime","solveTime","innerHTML","push","paragraph","createElement","appendChild","getBest","getAverage","processSolve","color","style","currentTime","Math","floor","toFixed","onkeydown","event","timeStamp","setTimeout","onkeyup","clearTimeout","ontouchstart","ontouchend","./times.js","2","Object","defineProperty","value","getAmount","times","result","forEach","time","parseFloat","best","sides","angles","previousSides","scramble","side","random","includes","splice","angle"],"mappings":"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"}
{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/times.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","times","result","forEach","time","parseFloat","getAmount","toFixed","best","sides","angles","previousSides","scramble","side","Math","floor","random","includes","push","splice","angle"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,IAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,CAAA,CAAAa,EAAA,CAAA,SAAAT,EAAAU,EAAAJ,gB,2HCC0B,SAAAK,GACzB,IAAIC,EAAS,EAGb,OAFAD,EAAME,QAAQ,SAAAC,GAAI,OAAIF,GAAUG,WAAWD,MAEnCF,EAASI,EAAUL,IAAQM,QAAQ,IAIrC,IAAMD,EAAY,SAAAL,GAAK,OAAIA,EAAMH,Q,wBAGjB,SAAAG,GACtB,IAAIO,EAAO,IAOX,OANAP,EAAME,QAAQ,SAAAC,GACVA,EAAOI,IACTA,EAAOJ,KAIFI,sBAIwB,WAO/B,IANA,IAAIC,EAAQ,CAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KACRC,EAAS,CAAA,GAAA,IAAA,KAETC,EAAgB,GAChBC,EAAQ,GAEJzB,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAI3B,IAFA,IAAI0B,EAAOC,KAAKC,MAAsB,EAAhBD,KAAKE,UAErBL,EAAcM,SAASJ,IAC5BA,EAAOC,KAAKC,MAAsB,EAAhBD,KAAKE,UAIxBL,EAAcO,KAAKL,GAEQ,GAAxBF,EAAcb,QAChBa,EAAcQ,OAAO,EAAG,GAEE,GAAxBR,EAAcb,QAEba,EAAc,GAAK,GAAKA,EAAc,IAAMA,EAAc,GAAK,GAAKA,EAAc,IACpFA,EAAcQ,OAAO,EAAG,GAK1B,IAAIC,EAAQN,KAAKC,MAAsB,EAAhBD,KAAKE,UAE5BJ,GAAY,IAAMH,EAAMI,GAAQH,EAAOU,GAA3B,IAGb,OAAOR","file":"times.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// Get average time of all solves\nexport const getAverage = times => {\n\tlet result = 0;\n\ttimes.forEach(time => result += parseFloat(time));\n\n\treturn (result / getAmount(times)).toFixed(2);\n}\n\n// Get amount of times\nexport const getAmount = times => times.length;\n\n// Get best time\nexport const getBest = times => {\n\tlet best = 100000;\n\ttimes.forEach(time => {\n\t\tif(time < best) {\n\t\t\tbest = time;\n\t\t}\n\t});\n\n\treturn best;\n}\n\n// Generate scramble text for the user to follow\nexport const generateScramble = () => {\n\tlet sides = [`U`, `F`, `R`, `D`, `B`, `L`];\n\tlet angles = [``, `\\'`, `2`];\n\n\tlet previousSides = [];\n\tlet scramble = ``;\n\n\tfor(let i = 0; i < 20; i++) {\n\t\t// Generate a random number from 0 to 5 for the side\n\t\tlet side = Math.floor(Math.random() * 6);\n\n\t\twhile(previousSides.includes(side)) {\n\t\t\tside = Math.floor(Math.random() * 6);\n\t\t}\n\n\t\t// Add sides to previous sides\n\t\tpreviousSides.push(side);\n\n\t\tif(previousSides.length == 3) {\n\t\t\tpreviousSides.splice(0, 1);\n\t\t}\n\t\tif(previousSides.length == 2) {\n\t\t\t// Check for opposite sides\n\t\t\tif(previousSides[0] + 3 != previousSides[1] && previousSides[0] - 3 != previousSides[1]) {\n\t\t\t\tpreviousSides.splice(0, 1);\n\t\t\t}\n\t\t}\n\n\t\t// Generate an angle\n\t\tlet angle = Math.floor(Math.random() * 3);\n\n\t\tscramble += ` ` + sides[side] + angles[angle] + `\\xa0`;\n\t}\n\n\treturn scramble;\n}"]}
{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/timer.js","src/js/times.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","prepareSolve","document","getElementById","innerText","_times","generateScramble","startTime","interval","spaceBarTimeout","spaceBarPressedBegin","spaceBarPressedDuration","inSolve","startingSolve","solves","window","startSolve","Date","now","setInterval","updateDisplay","cancelSolve","setTimer","stopSolve","clearInterval","displayFinalTime","solveTime","innerHTML","push","paragraph","createElement","appendChild","getBest","getAverage","processSolve","color","style","currentTime","Math","floor","toFixed","onkeydown","event","timeStamp","setTimeout","onkeyup","clearTimeout","ontouchstart","ontouchend","times","result","forEach","time","parseFloat","getAmount","best","sides","angles","previousSides","scramble","side","random","includes","splice","angle"],"mappings":"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","file":"timer.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// Imports from times.js\nimport { getAmount, getAverage, getBest, generateScramble } from './times.js';\n\n// Time of starting solve\nlet startTime, interval;\n\n// Boolean is user in solve\nlet inSolve = 0;\n\n// Boolean is user in process of starting a solve\nlet startingSolve = 0;\n\n// Timeout variable to set timer green when user has held the space bar for long enough\nlet spaceBarTimeout;\n\n// Begin timestamp and duration of the time the user has held down the space bar\nlet spaceBarPressedBegin, spaceBarPressedDuration;\n\n// Array with all solves\nlet solves = [];\n\n// Prepare a solve\nconst prepareSolve = () => document.getElementById(`scramble`).innerText = generateScramble()\nwindow.prepareSolve = prepareSolve;\n\n// Process a solve\nconst processSolve = () => {\n\t// Get solve time\n\tlet solveTime = document.getElementById(`timer`).innerHTML;\n\n\t// Add solve time to array\n\tsolves.push(solveTime);\n\n\t// Prepare and add paragraph with solve id and solve time\n\tlet paragraph = document.createElement(`P`);\n\tparagraph.innerHTML = `<p>Solve ` + solves.length + `: <strong>` + solveTime + `</strong></p>`;\n\tdocument.getElementById(`times`).appendChild(paragraph);\n\n\t// Update best solve if needed\n\tdocument.getElementById(`best`).innerHTML = `Best of ` + solves.length + `: <strong>` + getBest(solves) + `</strong>`;\n\n\t// Update average time of solves\n\tdocument.getElementById(`average`).innerHTML = `Average of ` + solves.length + `: <strong>` + getAverage(solves) + `</strong>`;\n\n}\n\n// Start a solve\nconst startSolve = () => {\n\tinSolve = 1;\n\tstartTime = Date.now();\n\tinterval = setInterval(() => updateDisplay(Date.now() - startTime));\n}\n\n// Cancel a solve\nconst cancelSolve = () => {\n\tsetTimer(`black`);\n\tstartingSolve = 0;\n}\n\n// Stop a solve\nconst stopSolve = () => {\n\t// User is not in solve and is not starting one\n\tinSolve = 0;\n\tstartingSolve = 0;\n\n\t// Change timer color\n\tsetTimer(`black`);\n\n\t// Stop timer and display solve time\n\tclearInterval(interval);\n\tdisplayFinalTime(Date.now() - startTime);\n\n\t// Process solve -> add solve to screen, change best and average\n\tprocessSolve();\n\n\t// Prepare next solve -> generate scramble for next solve\n\tprepareSolve();\n}\n\n// Change color of timer\nconst setTimer = color => document.getElementById(`timer`).style.color = color;\n\n// Update time of timer\nconst updateDisplay = currentTime => document.getElementById(`timer`).innerHTML = Math.floor((currentTime / 1000))\n\n// Display final time\nconst displayFinalTime = currentTime => document.getElementById(`timer`).innerHTML = (currentTime / 1000).toFixed(2)\n\n// When user presses down a key\ndocument.onkeydown = (event) => {\n\t// Check for space bar\n\tif(event.code !== `Space`) {\n\t\treturn;\n\t}\n\n\t// Check if user is in solve\n\tif(inSolve == 1) {\n\t\tstopSolve();\n\t\treturn;\n\t}\n\n\t// If user is already starting solve\n\tif(startingSolve) {\n\t\treturn;\n\t}\n\n\tstartingSolve = 1;\n\tdocument.getElementById(`timer`).innerHTML = `0`;\n\n\t// Get timestamp when the user holds the space key\n\tspaceBarPressedBegin = event.timeStamp;\n\n\t// Set timer to red -> indicate that he has to hold\n\tsetTimer(`red`);\n\n\t// Set timeout for timer to become green so that the user can begin their solve\n\tspaceBarTimeout = setTimeout(() => setTimer(`green`), 500);\n}\n\n// When user releases a key\ndocument.onkeyup = (event) => {\n\t// Check for space bar\n\tif(event.code !== `Space`) {\n\t\treturn;\n\t}\n\n\t// Check if user is starting their solve\n\tif(!startingSolve) {\n\t\treturn;\n\t}\n\n\t// Get how long has the user held the space bar\n\tspaceBarPressedDuration = (event.timeStamp - spaceBarPressedBegin) / 1000;\n\n\t// Clear timeout, we don't need it anymore\n\tclearTimeout(spaceBarTimeout);\n\n\t// Check if user has held down long enough\n\tif(spaceBarPressedDuration < 0.5) {\n\t\tcancelSolve();\n\t\treturn;\n\t}\n\n\t// Start solve because user has held long enough\n\tstartSolve();\n\n}\n\n// When user presses screen (on phone)\ndocument.getElementById(`timer`).ontouchstart = (event) => {\n\t// Check if user is in solve\n\tif(inSolve == 1) {\n\t\tstopSolve();\n\t\treturn;\n\t}\n\n\t// If user is already starting solve\n\tif(startingSolve) {\n\t\treturn;\n\t}\n\n\tstartingSolve = 1;\n\tdocument.getElementById(`timer`).innerHTML = `0`;\n\n\t// Get timestamp when the user holds the space key\n\tspaceBarPressedBegin = event.timeStamp;\n\n\t// Set timer to red -> indicate that he has to hold\n\tsetTimer(`red`);\n\n\t// Set timeout for timer to become green so that the user can begin their solve\n\tspaceBarTimeout = setTimeout(() => setTimer(`green`), 500);\n}\n\n// When user releases screen (on phone)\ndocument.getElementById(`timer`).ontouchend = (event) => {\n\t// Check if user is starting their solve\n\tif(!startingSolve) {\n\t\treturn;\n\t}\n\n\t// Get how long has the user held the space bar\n\tspaceBarPressedDuration = (event.timeStamp - spaceBarPressedBegin) / 1000;\n\n\t// Clear timeout, we don't need it anymore\n\tclearTimeout(spaceBarTimeout);\n\n\t// Check if user has held down long enough\n\tif(spaceBarPressedDuration < 0.5) {\n\t\tcancelSolve();\n\t\treturn;\n\t}\n\n\t// Start solve because user has held long enough\n\tstartSolve();\n\n}","// Get average time of all solves\nexport const getAverage = times => {\n\tlet result = 0;\n\ttimes.forEach(time => result += parseFloat(time));\n\n\treturn (result / getAmount(times)).toFixed(2);\n}\n\n// Get amount of times\nexport const getAmount = times => times.length;\n\n// Get best time\nexport const getBest = times => {\n\tlet best = 100000;\n\ttimes.forEach(time => {\n\t\tif(time < best) {\n\t\t\tbest = time;\n\t\t}\n\t});\n\n\treturn best;\n}\n\n// Generate scramble text for the user to follow\nexport const generateScramble = () => {\n\tlet sides = [`U`, `F`, `R`, `D`, `B`, `L`];\n\tlet angles = [``, `\\'`, `2`];\n\n\tlet previousSides = [];\n\tlet scramble = ``;\n\n\tfor(let i = 0; i < 20; i++) {\n\t\t// Generate a random number from 0 to 5 for the side\n\t\tlet side = Math.floor(Math.random() * 6);\n\n\t\twhile(previousSides.includes(side)) {\n\t\t\tside = Math.floor(Math.random() * 6);\n\t\t}\n\n\t\t// Add sides to previous sides\n\t\tpreviousSides.push(side);\n\n\t\tif(previousSides.length == 3) {\n\t\t\tpreviousSides.splice(0, 1);\n\t\t}\n\t\tif(previousSides.length == 2) {\n\t\t\t// Check for opposite sides\n\t\t\tif(previousSides[0] + 3 != previousSides[1] && previousSides[0] - 3 != previousSides[1]) {\n\t\t\t\tpreviousSides.splice(0, 1);\n\t\t\t}\n\t\t}\n\n\t\t// Generate an angle\n\t\tlet angle = Math.floor(Math.random() * 3);\n\n\t\tscramble += ` ` + sides[side] + angles[angle] + `\\xa0`;\n\t}\n\n\treturn scramble;\n}"]}